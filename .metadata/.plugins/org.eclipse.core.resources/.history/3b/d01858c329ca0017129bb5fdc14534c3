package paint2;

import javax.swing.*;
import java.awt.*;

/**
 * A JPanel that supports painting shapes via click and drag operations. Any
 * number of shapes can be drawn. Notice that PaintPanel extends JPanel and
 * implements two interfaces, which allows a PaintPanel object to deal with the
 * mouse events that occur over it.
 */
@SuppressWarnings("serial")
public class PaintPanel extends JPanel
{
    // Button groups for selecting shape and color
    private ButtonGroup shapeButtons;
    private ButtonGroup colorButtons;

    /**
     * Creates a PaintPanel containing no shapes
     */
    public PaintPanel (ButtonGroup shapeButtons, ButtonGroup colorButtons)
    {
        setBackground(Color.WHITE);
        this.shapeButtons = shapeButtons;
        this.colorButtons = colorButtons;
    }

    /**
     * When Swing determines that a component needs to be painted, it calls this
     * method. The version that comes with JPanel fills in the background color.
     * This overrides that version by also painting the shapes.
     */
    @Override
    public void paintComponent (Graphics g)
    {
        // We invoke the original, overridden version to paint the background.
        super.paintComponent(g);

        // Turn on anti-aliasing
        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_RENDERING,
                RenderingHints.VALUE_RENDER_QUALITY);

        g.setColor(getColor());
        
        switch (shapeButtons.getSelection().getActionCommand())
        {
        case "oval":
            g.drawOval(200, 100, 150, 250);
            break;
        case "rect":
            g.drawRect(200, 100, 150, 250);
            break;
        case "line":
            g.drawLine(200, 100, 150, 250);
            break;
        }
    }

    /**
     * Returns the selected color
     */
    public Color getColor ()
    {
        switch (colorButtons.getSelection().getActionCommand())
        {
        case "red":
            return Color.red;
        case "blue":
            return Color.blue;
        case "green":
            return Color.green;
        default:
            return Color.black;
        }
    }
}
