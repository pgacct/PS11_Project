package asteroids.participants;

import static asteroids.game.Constants.*;
import java.awt.Shape;
import java.awt.geom.*;
import asteroids.destroyers.*;
import asteroids.game.Controller;
import asteroids.game.Participant;

/**
 * Represents ships
 */
public class Ship extends Participant implements AsteroidDestroyer, AlienShipDestroyer, ABulletDestroyer
{
    // The outlines of the ship with and without flame
    private Shape noflameOutline;
    private Shape flameOutline;
    private boolean showFlame;

    // Game controller
    private Controller controller;

    // Tracks whether we are currently accelerating
    private boolean accelerating;

    // Constructs a ship at the specified coordinates
    // that is pointed in the given direction.
    public Ship (int x, int y, double direction, Controller controller)
    {
        this.controller = controller;
        setPosition(x, y);
        setRotation(direction);
        accelerating = false;
        showFlame = true;

        Path2D.Double poly = new Path2D.Double();
        poly.moveTo(20, 0);
        poly.lineTo(-20, 12);
        poly.lineTo(-13, 10);
        poly.lineTo(-13, -10);
        poly.lineTo(-20, -12);
        poly.closePath();
        noflameOutline = poly;

        poly = new Path2D.Double();
        poly.moveTo(20, 0);
        poly.lineTo(-20, 12);
        poly.lineTo(-13, 10);
        poly.lineTo(-13, -5);
        // flame
        poly.lineTo(-25, 0);
        poly.lineTo(-13, 5);
        poly.lineTo(-13, -10);
        // ship
        poly.lineTo(-20, -12);
        poly.closePath();
        flameOutline = poly;
    }

    /**
     * Returns the x-coordinate of the point on the screen where the ship's nose is located.
     */
    public double getXNose ()
    {
        Point2D.Double point = new Point2D.Double(20, 0);
        transformPoint(point);
        return point.getX();
    }

    /**
     * Returns the x-coordinate of the point on the screen where the ship's nose is located.
     */
    public double getYNose ()
    {
        Point2D.Double point = new Point2D.Double(20, 0);
        transformPoint(point);
        return point.getY();
    }

    @Override
    protected Shape getOutline ()
    {
        if (accelerating)
        {
            showFlame = !showFlame;
            if (showFlame)
            {
                return flameOutline;
            }
            else
            {
                return noflameOutline;
            }
        }
        else
        {
            return noflameOutline;
        }
    }

    /**
     * Customizes the base move method by imposing friction
     */
    @Override
    public void move ()
    {
        applyFriction(SHIP_FRICTION);
        super.move();
    }

    /**
     * Turns right by Pi/16 radians
     */
    public void turnRight ()
    {
        rotate(Math.PI / 16);
    }

    /**
     * Turns left by Pi/16 radians
     */
    public void turnLeft ()
    {
        rotate(-Math.PI / 16);
    }

    /**
     * Accelerates by SHIP_ACCELERATION
     */
    public void accelerate ()
    {
        accelerate(SHIP_ACCELERATION);
        if (!accelerating)
        {
            getSounds().startLoop("thrust");
        }
        accelerating = true;
    }

    /**
     * Makes no change to the ship's acceleration
     */
    public void coast ()
    {
        if (accelerating)
        {
            getSounds().stopLoop("thrust");
        }
        accelerating = false;
    }

    /**
     * Fires a bullet, assuming there aren't too many flying around already.
     */
    public void shoot ()
    {
        if (!controller.atBulletLimit(BULLET_LIMIT))
        {
            Bullet b = new SBullet(getXNose(), getYNose(), getRotation());
            b.setVelocity(BULLET_SPEED, getRotation());
            controller.addParticipant(b);
            getSounds().play("fire");
        }
    }

    /**
     * When a Ship collides with a ShipKiller, it expires
     */
    @Override
    public void collidedWith (Participant p)
    {
        if (p instanceof ShipDestroyer)
        {
            // Expire the ship from the game
            Participant.expire(this);

            // Play the sound
            getSounds().play("bangShip");
            getSounds().stopLoop("thrust");

            // Display some debris that will quickly disappear
            controller.addParticipant(new DriftingLine(getX(), getY(), 20));
            controller.addParticipant(new DriftingLine(getX(), getY(), 20));
            controller.addParticipant(new DriftingLine(getX(), getY(), 5));

            // Tell the controller the ship was destroyed
            controller.shipDestroyed();
        }

    }
}
