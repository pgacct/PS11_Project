package asteroids.game;

import static asteroids.game.Constants.*;
import java.awt.*;
import java.util.Iterator;
import javax.swing.*;
import asteroids.participants.Ship;

/**
 * The area of the display in which the game takes place.
 */
@SuppressWarnings("serial")
public class Screen extends JPanel
{
    // Legend that is displayed across the screen
    private String legend;
    
    // Score that is displayed on the screen
    private String score;
    
    // Number of lives that is displayed on the screen
    private int lives;
    
    // Level that is displayed on the screen
    private String level;
    
    // Game controller
    private Controller controller;
    
    // Small and large fonts
    private Font largeFont = new Font(Font.SANS_SERIF, Font.PLAIN, 120);
    private Font smallFont = new Font(Font.SANS_SERIF, Font.PLAIN, 30);
    
    // For drawing lives
    private Ship shipStencil;
    
    /**
     * Creates an empty screen
     */
    public Screen (Controller controller)
    {
        this.controller = controller;
        legend = "";
        score = "";
        level = "";
        setPreferredSize(new Dimension(SIZE, SIZE));
        setMinimumSize(new Dimension(SIZE, SIZE));
        setBackground(Color.black);
        setForeground(Color.white);
        setFocusable(true);
        shipStencil = new Ship(0, 0, -Math.PI / 2, null);
    }
    
    /**
     * Set the legend
     */
    public void setLegend (String legend)
    {
        this.legend = legend;
    }
    
    /**
     * Set the score
     */
    public void setScore (int n)
    {
        this.score = n + "";
    }
    
    /**
     * Set the number of lives
     */
    public void setLives (int n)
    {
        this.lives = n;
    }
    
    /**
     * Set the level
     */
    public void setLevel (int n)
    {
        this.level = n + "";
    }
    
    /**
     * Paint the participants onto this panel
     */
    @Override
    public void paintComponent (Graphics graphics)
    {
        // Use better resolution
        Graphics2D g = (Graphics2D) graphics;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        // Do the default painting
        super.paintComponent(g);
        
        // Draw each participant in its proper place
        Iterator<Participant> iter = controller.getParticipants();
        while (iter.hasNext())
        {
            iter.next().draw((Graphics2D) g);
        }
        
        // Draw the legend across the middle of the panel
        setFont(largeFont);
        int size = g.getFontMetrics().stringWidth(legend);
        g.drawString(legend, (SIZE - size) / 2, SIZE / 2);
        
        // Draw the score in the upper left
        g.setFont(smallFont);
        g.drawString(score, LABEL_HORIZONTAL_OFFSET, LABEL_HORIZONTAL_OFFSET);
        double center = LABEL_HORIZONTAL_OFFSET + g.getFontMetrics().stringWidth(score) / 2.0;
        
        // Draw the level in the upper right
        g.drawString(level, SIZE - g.getFontMetrics().stringWidth(level) - LABEL_HORIZONTAL_OFFSET,
                LABEL_HORIZONTAL_OFFSET);
        
        // Draw the lives
        double start = center - lives * SHIP_WIDTH / 2 - (lives - 1) * SHIP_SEPARATION / 2;
        for (int i = 0; i < lives; i++)
        {
            shipStencil.setPosition(start + SHIP_WIDTH / 2, LABEL_VERTICAL_OFFSET + SHIP_SEPARATION + SHIP_HEIGHT);
            shipStencil.move();
            shipStencil.draw(g);
            start = start + SHIP_WIDTH + SHIP_SEPARATION;
        }
    }
}
